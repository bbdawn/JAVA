**15일차 주요 목차**
@1	review
@2 	IO(입출력)
@3 	Object Serialization(객체직렬화)
-------------------

@1	review

# jvm 통역자 메모리관리
# stack 로컬변수 저장
# heap 객체속성정보(인스턴스변수)저장
# meta space 패키지 메서드 생성자 등 static variable(class variable) 저장
# oop 
	encapsulation 구현부는 감추기
	inheritance ** 부모의 멤버 재사용, 계층구조 형성. 단일
	polymorphism **

	overloading
	overriding

	abstract **
	interface **

# collection
	list 
	set
	map
	stack
	queue

#ExceptionHandling
	catch
	finally
	throws
	throw
#IO
	Stream
	InputStream
	OutputStream
	Reader
	Writer
	 
 # String, StringBuilder(StringBuffer)
		자바 문자열
		String 		StringBuilder 		StringBuffer
		불변				가변					가변
											thread-safe(동기화처리)
											
 # String 
 	: 	String Constant Pool에 저장 (동일한 문자열은 추가되지 않음)
 	  	특정 문자열을 여러 곳에서 공유해 사용 -> 메모리를 효율적으로 사용
 	  	문자열 변경시 새로 생성된다 -> gc가 된 이후에는 다시 연결불가. 다시 생성해야함
 	  	동일한 문자열을 여러 곳에서 사용할 때 적합
 
 # StringBuilder(StringBuffer)
 	: 	문자열 변경시 자체가 변경 -> 가변
 		문자열 "자체"가 자주 변경될 때 유리 
 
 
 # StringBuffer

 # java.io.File


 # 	IO(입출력)
	IO : Input(입력) Output(출력)
	Stream(스트림) : 사전적 의미는 줄기, 파이프라인
					 입출력을 위한 장치
					 
 # IO계열의 4가지 부모 abstract_부모역할에집중 class
 	
 			1byte(ByteStream 계열)			2byte(CharacterStream계열)	
 	입력			InputStream							Reader
 	출력			OutputStream						Writer
 	
 	NodeStream계열 : 직접 장치에 연결, 필수적 
 	ProcessingStream(FilterStream)계열 : 다양한 기능을 제공, 뒤에 기능을 추가하기 위해 존재. 기존의 stream에 연결되어 사용된다  
  


@3 	Object Serialization(객체직렬화)
	: 메모리(heap)상에 있는 객체의 정보를 연속적인 데이터로 변경하여 외부로 전송할 수 있는 상태로 만드는 것
	
	객체 역직렬화 (Object DeSerializarion)
	: 외부에 저장되어있는 정보를 객체로 복원해서 heap 메모리 영역에 적재하는 것
	
	객체 직렬화 작업 특징
	: 객체 직렬화를 위해서는 객체를 만들기 위한 클래스가 반드시 java.io.Serializable Interface를 implements 해야한다. 
	(Serializable interface의 계층구조하에 있어야한다)
	만약 Serializable interface를 구현하지 않은 상태에서 전송하려고하면 다음과 같은 예외가 발생한다
	java.io.NotSerializableException
	
	객체직렬화를 위한 ProcessingStream : ObjectOutputStream writeObject(Object)
	객체역직력화를 위한 ProcessingStream : ObjectInputStream readObject() : Object
	
	- transient keyword : transient가 명시된 인스턴스 변수의 정보는 직렬화 대상에서 제외
	
























