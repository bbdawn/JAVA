**17일차 주요목차**
- Thread 개념
- Thread 생성방법
- Thread 동작원리 : start() 와 run() 
- Multi Threading 
- synchronized ( 동기화 처리 ) 
--------------------------------------

- Thread : 프로세스 내의 세부적 실행 단위 
			  프로세스란 현재 실행중인 프로그램을 의미 
			  
			  하나의 프로세스는 여러 개의 스레드가 실행되면서 구성될 수 있다 
			  
			  사전적 의미는 실(thread) -> 여러 개의 실(thread)이 모여 옷(process)을 만든다 
			  ex) 동영상 플레이어가 현재 실행중이다 -> 동영상 플레이어 프로세스 
			  	   동영상 서비스를 위해서는 영상(thread) , 음향(thread) , 자막(thread)가 필요하다 
			  	   이러한 동영상 플레이어 프로세스 내의 세부적 실행단위를 스레드라고 한다 
			  	   이러한 영상, 음향, 자막 스레드들이 동시에 실행되는 것을 멀티 스레딩이라고 한다 

- Thread 생성방법
	1) extends Thread 
	2) implements Runnable 

- Thread 동작원리 
	start() : 스레드를 실행가능상태(Runnable)로 보낸다 
			  이후 JVM이 스케줄링을 해서 실행(Running) 상태로 전이된다 
	
	run() : 스레드의 실행 내용을 정의한다 
			JVM이 스케줄링을 하면 실행되는 메서드 
			run() 메서드가 실행을 마치면 스레드는 종료된다 

  - Thread 별로 Stack 메모리가 생성된다.  local variable 정보는 Stack에 저장되므로 Thread 별로 local variable이 운용된다   

  - Thread 의 setDaemon(true) : 자신을 생성한 스레드가 종료되면 해당 스레드도 함께 종료되도록 처리 
     ex)  Word 스레드에서 Backup 스레드를 생성하고 start 
     	   Backup 스레드를 setDaemon(true) 로 설정 
     	   이 경우에는 Word 스레드가 작업 종료되면 Backup 스레드 또한 함께 종료된다 
  
  - Thread는 우선 순위 방식을 채택 ( 가장 낮은 우선순위 1 , 기본 우선순위 5, 가장 높은 우선순위 10 )    	   
    -> 운영체제별로 우선 순위가 적용되는 여부는 다르므로 참고만 한다 

  - 다수 스레드 즉 멀티 스레드는 데이터를 공유할 수 있다는 장점이 있다 
    스레드는 각각 별도로 stack 메모리 영역을 가지고 있다 ( 즉 local variable은 각각 정보를 가지게 된다 ) 
    객체는 하나의 heap 영역에 저장되어 여러 스레드가 공유해서 사용할 수 있다 
    
  - 멀티 스레딩시 동기화 처리 ( synchronized ) : 특정 영역을 단일 스레드 환경으로 만드는 것 -> thread-safe 
     동기화 ( synchronzied ) 는 다수의 스레드가 자원을 공유할 때 작업의 신뢰성을 위해 사용하고 
     공유 자원에 대해 특정 스레드가 작업 중에는 다른 스레드들이 참여 할 수 없도록 처리하는 것을 말한다 
     
   - 동기화 처리방법 
      1. 메서드 단위에서 동기화 처리 :  ex)  public synchronized void use(){} -> 메서드를 단일 스레드 환경으로 만듬 
      2. 특정 코드 영역에서만 동기화 처리 :  ex)  synchronized(this){}  -> 특정 영역에만 단일 스레드 환경으로 만듬 
      
      예 )  카페의 화장실을 여러 손님이 사용할 때 순차적으로  사용해야 한다 
      	    영화 좌석을 예매할 때 동일한 좌석 티켓이 예매되지 않도록 순차적으로 예매해야 한다 
      	    
   문자열 관련
   String : 불변 , 변경시 새로 생성 
   StringBuilder : 가변, 자체가 변경 
   StringBuffer : 가변 , 동기화 처리 ( thread-safe )     	    

   java Collection 계열 
   					 thread-safe 동기화처리 
   ArrayList   vs  Vector 
   HashMap    vs  Hashtable 
   
   위의 Vector 와 Hashtable은 최근 사용하지 않고 List 또는 Map 계열의 동기화 처리가 필요할 때는 
   java.util.Collections 의 synchronizedList() 와  synchronizedMap() 을 이용해 동기화 처리된 List 와 Map을 사용한다 











