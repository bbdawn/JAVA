**2일차 주요 목차**
- review
- OOP 주요 개념 중 Encapsulation
- getter, setter method
- Constructor (생성자)
- Java Data Type
- 연산자
- 제어문
--------------------
- review
- OOP 주요 개념 중 Encapsulation
	
	OOP(Object Oriented Programming)의 주요 개념은
	Encapsulation_캡슐화, Inheritance_상속, Polymorphism_다형성
	Encapsulation : "public interface, private implementation"
	(캡슐화)			인터페이스(소통부)와 인플리멘테이션(구현부)를 분리하고
					인터페이스는 공개, 구현부는 은닉한다(감춘다)

					why? 	정보은닉(information hiding)을 통한 정보 보호
							사용자 측에서는 인터페이스만 파악해서 사용할 수 있다 -> 생산성 향상
							구현부가 업데이트 되어도 외부 소통에는 영향이 없다 -> 유지 보수성 향상
							(ex. 네이버 버전은 계속해서 높아지지만 UserInterface는 동일)

ex) 차를 만들 때 엔진, 틀, 바퀴 다 따로 만들어서 조립
	별도의 모듈에서 만들어서 조립 -> 전문화
	엔진에 문제가 생겼을 때 엔진만 빼서 고치면 됨
	component - 독립적 기능 단위 (뇌_수천만개의 뇌세포가 구성되어 뇌가 됨, 엔진)
	object - 생물의 세포, 뇌 (껍데기-interface, 안쪽부분-implementation)

interface : 소통부 
implementation : 구현부
bean(커피콩)으로도 많이 표현함. 

응집도 : 자신의 역할에 집중 (높아야함)
결합도 : 외부 단위에 의존도 (낮아야함) 

[step1 예제에서 확인]


- getter, setter method
  getter :	사용하는 측에서 해당 객체의 정보(인스턴스 변수 정보)를 얻고자 할 때
			인스턴스 변수 정보를 리턴하는 메서드
			ex) public String getPassword(){
					return password;
				}
  setter : 	사용하는 측에서 해당 객체의 정보를 할당하고자 할 때 사용하는 메서드 (할당만 받는 것)
  			인스턴스 변수 정보를 받아서 할당하는 메서드
  			ex) 
  					private String password; // 인스턴스 변수
  					public void setPassword(String password){ //매개변수이자 지역변수
  						password=password; 이렇게 하면 할당이 안됨 (매개변수와 지역변수가 구분이 안됨)
  						this.password=password; 이렇게 해야함 
  					}
  					//this : 현재 실행중인 객체를 가르키는 자바 키워드 (매개변수와 지역변수를 구분하기위해사용)
  					//this.password : 인스턴스 변수를 가르킨다
  					//위에서 this를 사용하는 이유는 인스턴스변수와 매개변수를 구분하기 위해 
  					

- Constructor(생성자)
   : 객체 생성시 실행되는 클래스의 구성요소 
   
   특징 
   클래스 내에 생성자를 명시하지 않을 경우 (컴파일러가)컴파일시에 자동으로 기본 생성자가 삽입
   별도의 객체 초기화 작업이 필요할 경우에는 생성자를 직접 명시한다 
   - 객체 초기화 작업 : 객체 생성시점에 필요한 작업
   						ex) 회원 가입시 필수 입력 항목
   							신용카드 발급시 신용조회를 위한 개인정보
   생성자 명은 클래스명과 동일해야한다. **
  
            생성자
   ex) new Person();  하면은 ---------> class Person{Person(){})  이 실행됨.  
                                                    위의 생성자가 실행 완료되었을 떄 객체가 생성되어
                                                    메모리에 적재 
  	[step4,5]에서 생성자 실습			
  	
  	
  	
 - Java Data Type 
  	변수 앞에 선언되는 애. 데이터의 종류를 설정해주는 것
  	자바의 데이터타입에는 Primitive_프리미티브 Type(기본형)과 Reference Type(참조형)이 있다
  	
  1) Primitive Type (기본형 타입) [step6]
  	//최대최소범위가 정해져있다
  	// long-> L, float-> F 붙여주기 
  			1byte	2byte	4byte	8byte
  	정수형	byte	short	int		long		정수형의 기본형은 int
  	실수형					float	double		실수형의 기본형은 double
  	문자형			char
  	논리형	boolean
  	
  	//1bit = 8byte
  	
  2) Reference Type (참조형 타입) [step7]
  	객체를 참조한다는 뜻. 데이터 타입을 예상할 수 없을 때 (ex. class 명)
  	객체를 참조하는 변수의 타입을 참조형 데이터 타입이라고 한다. 
  	기본형타입(8개)외에는 전부 참조형 타입!
  	일반적으로 클래스명이 참조형데이터타입이 된다. 
  	
  	String name="봄";
  	String name2="아이유"; ---> String은 참조형데이터타입
  	
  	Person p=new Person(); ---> Person은 참조형데이터타입, p를 참조변수
  	

- 연산자 [step8]

- 제어문 [step9, 10]
	if ~ else if ~ else
	switch case
	
  			
**3일차 주요 목차**
 - review
 - 제어문 (조건문 switch case)
 - 제어문 (반복문 for, while, do while)
 - 객체 초기화 단계
 - 변수의 종류와 범위
 - UML (Class Diagram)
 - Class Diagram의 Relationship			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			




